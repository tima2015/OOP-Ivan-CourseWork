#include <string>
#include <windows.h>
#ifndef NANOK_HPP
#define NANOK_HPP

/**
 * Класс редактор текста в терминале Windows.
 */
class Nanok {
public:
    /**
     * Если fileName не указан, создаётся пустой файл.
     * Иначе содержимое файла считывается и предостовляется к редактированию
     */

    Nanok(const char *fileName = NULL);
    /**
     * Удаляет динамически созданый массив строк (Текст)
     */

    virtual ~Nanok();
    /**
     * Запускает работу редактора
     */
    void run();
private:
    /**
     * Текст. Массив строк
     */
    std::string *text;

    /**
     * Размер динамического массива строк
     */
    int strCount;

    /**
     * Увеличение размеров динамического массива текста.
     * Размер массива становится равным n^2, где n предыдущий размер массива.
     */
    void increaseTextSize();

    /**
     * Текущая позиция курсора в тексте
     */
    int ix = 0, iy = 0;

    /**
     * Выводит в терминал текст.
     */
    void print();

    /**
     * Перепечатывает текущую строку.
     * Вызывает print() если размер текущей строки стал
     * занимать на одну строку консольного окна больше/меньше.
     */
    void printLine();

    /**
     * Дескриптор необходимый для получения значения ширины окна консоли.
     */
    HANDLE hWndConsole = GetStdHandle(STD_OUTPUT_HANDLE);

    /**
     * Получает данные о ширине консоли
     * @return значение выроженое в возможном кол-ве символов на строку консоли.
     */
    int getConsoleWidth();

    /**
     * Путь к файлу.
     * Используется для сохранения.
     */
    const char* fileName;//

    /**
     * Открыть файл для редактирования
     */
    void open();//

    /**
     * Сохранить файл указав новый путь и имя файла
     */
    void saveAs();

    /**
     * Сохранить файл.
     * Если исходный файл не существует, указывается новый путь и имя файла
     */
    void save();

    /**
     * Вставить символ в текущую позицию
     */
    void insertChar(const char character);

    /**
     * Удаление текущего символа.
     */
    void backspace();

    /**
     * Удаление впереди стоящего символа.
     */
    void del();

    /**
     * Вставка переноса строки.
     */
    void enter();

    /**
     * Курсор на предыдущую строку.
     * Если текущая строка длинее предыдущей, курсор переносится в конец предыдущей строки.
     */
    void toUp();

    /**
     * Курсор на следующую строку.
     * Если текущая строка длинее следующей, курсор переносится в конец следующей строки.
     */
    void toDown();

    /**
     * Курсор на одну позицию влево.
     * Если начало строки переносит курсор в конец предыдущей строки.
     * Если начало файла позиция не изменяется.
     */
    void toLeft();

    /**
     * Курсор на одну позицию вправо.
     * Если конец строки переносит курсор в начало следующей строки.
     * Если конец файла позиция не изменяется.
     */
    void toRight();

    /**
     * Курсор в начало строки.
     */
    void toStrStart();

    /**
     * Курсор в конец строки.
     */
    void toStrEnd();

    /**
     * В начало текста.
     */
    void toTextStart();

    /**
     * В конец текста.
     */
    void toTextEnd();
};

#endif //NANOK_HPP